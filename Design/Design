DESIGN DOCUMENT

NONOGRAMS

Authored By:  Group 17
Alex Enersen, Ben Salitros, John Schoen,
Kyle Stolle, Jingchen Wang

University of Nebraska - Lincoln
CSCE 361
Spring 2018
February 23, 2018

Introduction
The purpose of this document is to describe the overall structure of the system in terms of its components, their relationships to each other, and the principles governing the design and future developments for the Nonograms puzzle game. This document will include the architectural structure of the system, including diagrams demonstrating the relationships between system design choices, and the interfaces by which the system is composed. The document will also include the decomposition of classes, including the attributes, and relationships between classes used by the system. The audiences of this document are the software engineers and project managers who will be implementing and maintaining this system.
Architecture
	
2.1  Introduction
From a high level perspective, the design of the system is an object-oriented, event driven 	 system.  The system starts by generating a display object which serves as both an interface for the user and a launching point for all other game activity.  When a display object is initialized, it loads a game by creating a file list object which has a method for randomly selecting a puzzle file from a predefined directory.  This file is then used to create a puzzle reader object which parses the game file data and places it into data containers that are used by subsequent objects to make a playable game field.  When a game is loaded from a puzzle reader object, a grid object is created.  This grid object is a container for tile objects which respond to user-generated events.  When a user clicks a tile, a mouse-pressed event is triggered which will respond by changing the color of the tile, tagging the tile as selected or deselected, and comparing the current game grid to the grid of loaded file.  If the grids match, then another event is triggered informing the user that they have won the game.  If not, the game continues until it is won.  The user can then respond to a dialog which triggers events to restart the game, play a new game, or exit the system.  A menu generated by the display object also contains these same event triggered options as well as providing the user with a timer for their current game.  A separate system, designed to allow the user to build custom puzzle files is planned to be merged into the main system in the future.  This puzzle builder sub-system utilizes the same grid and tile objects and responds similarly to the user-generated events.  The puzzle builder also contains a file writer object which allows for saving the user-generated puzzle files.
	
2.2  Modules

2.2.1  Display
The display object initializes the game and launches the GUI for the system.  Display is also the main container for event classes.  When user generated events occur, event listeners contained in display handle the events appropriately.

2.2.2  File List Reader
The file list reader simply serves as a file I/O manager for choosing a puzzle file.  The file list reader scans the directory for puzzle files, and creates a data container for the file names in the directory.  The file list reader also contains a method for choosing a random file from the directory.  In future phases, a method of determining puzzle difficulty may be implemented, and it will be the file list reader’s job to create a list of files based on difficulty.

2.2.3  Puzzle Reader
The puzzle reader loads a game file by parsing puzzle file data into meaningful data for grid and tile objects.  Once a puzzle file has been parsed and data has been assembled and placed into data containers, the puzzle reader scans the puzzle data to generate a game grid.

2.2.4  Grid
The grid object is essentially a custom data container for tile objects.  The grid assembles the tile objects into a game field for the user to play the game on.  In a game, the system utilizes two grid objects, a loaded game file and the game grid being played.  These grids are compared against one another to determine if the user has solved the puzzle.

2.2.5 Tile
A tile object is an interactive graphical object that is an individual part of the game field.  When tile objects are assembled together in a grid, a complete puzzle is formed.
2.2.5.1 Curtain Tile
A curtain tile object is a specialized non-interactive tile that is used to display puzzle clues.  When a complete game grid is formed, the interactive tile objects are surrounded by curtain tiles to display all of the puzzle clues for each row and column of the playable grid.

2.2.6  Puzzle Writer
The puzzle writer object constructs a puzzle CSV file from a given grid.
2.2.7 Event Listeners
2.2.7.1  Menu Listener
Listens for input from the user and provides a list of selectable options when activated.
2.2.7.2  New Game Listener
Listens for input from the user and loads a new game when activated.
2.2.7.3  Restart Listener
Listens for input from the user and reloads the currently loaded puzzle file when activated.
2.2.7.4  Save Puzzle Listener
Listens for input from the user and instantiates a puzzle writer object to generate puzzle file when activated.
2.2.7.5  Tile Action Listener
Listens for input from the user and toggles the state of a tile when activated.  A deselected tile is colored white, and a selected tile is colored black.  The tile action listener also updates the grid array, the grid UI, and in a game, compares the game grid to a loaded grid file.
Class Diagrams

3.1 Data Table Classes
There isn’t a database component within the scope of this project, so a data table is unnecessary.

3.1.1 Data Table Schema
			
3.1.2 Schema Information
3.1.2.1  Main
The Main method will serve to create a new instance of Display and has no other functions.
3.1.2.2  Display
The Display class is used to create the GUI for the project and contains the Listeners that respond to user-generated events.
3.1.2.3  FileListReader
The FileListReader class is responsible for processing CSV-style puzzle files and sending the information to the PuzzleReader class.
3.1.2.4  PuzzleReader
The PuzzleReader class receives information from the FileListReader class and creates a grid using the Grid class.
3.1.2.5  Grid
The Grid class is utilized from both the Display class and the FileReader class.
3.1.2.6  Tile
TileActionListeners are applied to Tiles from the Display class, which changes the boolean value of the TileActive variable when a tile is clicked by the player. This will toggle the color of the Tile.
3.1.2.7  Curtain Tile
The Curtain Tile class extends the Tile class to create non-interactable tiles.

3.2 Class Information
Classes are going to be implemented in Java and will be related to each other as shown in the diagram. Each class will also have constructors and the appropriate getters and setters where needed.
